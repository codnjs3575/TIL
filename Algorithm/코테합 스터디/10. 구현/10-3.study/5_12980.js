// 한 번에 K칸을 앞으로 점프 || (현재까지온거리) X 2에 해당하는 위치로 순간이동
// K 칸을 점프하면 K만큼의 건전지 사용량이 듬 => 따라서, 순간이동이 효율적
// 거리가 N만큼 떨어진 장소로 가기 위해 최소한의 점프를 사용해야 함

// 풀이방법 1. 0부터 +1하면서 배수를 풀이
// 풀이방법 2. N부터 /2하면서 점프해야 할 거리 계산 (다른 사람 풀이 참고)
function solution(n) {
  let cnt = 0 // 점프 개수

  while (n > 0) {
    if (n % 2 == 1) cnt++
    n = parseInt(n / 2)
  }
  return cnt
}

solution(5000)
