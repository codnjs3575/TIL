// routes : 고속도로를 이동하는 차량(1대 이상 10,000대 이하)의 경로
//          routes[i][0] : i번째 차량이 고속도로에 진입한 지점
//          routes[i][1] : i번째 차량이 고속도로에서 진출한 지점
//     |--------------|--------------|--------------|--------------|
// -30,000         -15,000           0            15,000         30,000

// 로직 1. 진출/진입의 교차점(최댓값/최솟값)을 확인해볼까? -> 하지만 이럴려면 모든 차량에 대해 모든 교차점과 그 조합을 생각해야하기에 경우의 수가 많아짐
// 로직 2. 그리디: 진출 지점마다 카메라 설치해놓고 다른 차량과 확인해보기? (진출 -15, -13, -5, -3로 정렬하기)
//        [-20,-15] [-18,-13] [-14,-5] [-5,-3]
//        진출 -15 설치 -> 진입 -18(<-15) 패스 -> 진입 -14(>-15) 설치(진출 -5) -> 진입 -5 패스
function solution(routes) {
  // 가장 빨리 진출한 차량 순으로 정렬하기
  routes.sort((a, b) => a[1] - b[1])
  let answer = 0
  let camera = -Infinity

  for (const [enter, exit] of routes) {
    // if: 카메라에 이미 찍히고 있는 경우(진입을 했는데 곧 카메라를 지나칠 예정, 진출은 무조건 앞 차량보다 늦기때문에!)
    if (enter <= camera) continue // 진입이 camera보다 작다면(카메라를 지나쳐 옴) pass

    // else : 카메라에 찍히지 않고 있는 경우(진입을 했는데 카메라 설치 위치보다 앞임)
    answer++
    camera = exit
  }
  return answer
}

// prettier-ignore
solution([[-20,-15], [-14,-5], [-18,-13], [-5,-3]]) // 2
