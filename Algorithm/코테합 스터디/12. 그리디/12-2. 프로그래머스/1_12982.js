// 풀이 1. for문, break 사용버전
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.06ms, 33.5MB)
// 테스트 3 〉	통과 (0.05ms, 33.5MB)
// 테스트 4 〉	통과 (0.05ms, 33.4MB)
// 테스트 5 〉	통과 (0.06ms, 33.3MB)
// 테스트 6 〉	통과 (0.06ms, 33.5MB)
// 테스트 7 〉	통과 (0.14ms, 33.5MB)
// 테스트 8 〉	통과 (0.20ms, 33.4MB)
// 테스트 9 〉	통과 (0.17ms, 33.4MB)
// 테스트 10 〉	통과 (0.14ms, 33.5MB)
// 테스트 11 〉	통과 (0.14ms, 33.5MB)
// 테스트 12 〉	통과 (0.15ms, 33.4MB)
// 테스트 13 〉	통과 (0.21ms, 33.4MB)
// 테스트 14 〉	통과 (0.21ms, 33.4MB)
// 테스트 15 〉	통과 (0.14ms, 33.5MB)
// 테스트 16 〉	통과 (0.16ms, 33.4MB)
// 테스트 17 〉	통과 (0.16ms, 33.5MB)
// 테스트 18 〉	통과 (0.14ms, 33.5MB)
// 테스트 19 〉	통과 (0.16ms, 33.6MB)
// 테스트 20 〉	통과 (0.13ms, 33.4MB)
// 테스트 21 〉	통과 (0.16ms, 33.5MB)
// 테스트 22 〉	통과 (0.13ms, 33.5MB)

function solution(arr, budget) {
  // d : 부서별로 물품 구입에 필요한 금액이 들어있는 배열 (배열 길이 : 1~100) (신청 금액 : 1 ~ 100,000)
  // budget : 총 예산 (1 ~ 10,000,000)
  // return : 최대 몇 개의 부서에서 물품을 구입할 수 있는지

  arr.sort((a, b) => a - b)
  let count = 0
  let total = 0
  for (let i = 0; i < arr.length; i++) {
    total += arr[i]
    if (total > budget) break
    count++
  }
  return count
}

// 풀이 2. reduce 사용 버전
// 테스트 1 〉	통과 (0.04ms, 33.4MB)
// 테스트 2 〉	통과 (0.06ms, 33.5MB)
// 테스트 3 〉	통과 (0.04ms, 33.5MB)
// 테스트 4 〉	통과 (0.05ms, 33.4MB)
// 테스트 5 〉	통과 (0.06ms, 33.5MB)
// 테스트 6 〉	통과 (0.05ms, 33.4MB)
// 테스트 7 〉	통과 (0.14ms, 33.4MB)
// 테스트 8 〉	통과 (0.14ms, 33.5MB)
// 테스트 9 〉	통과 (0.16ms, 33.4MB)
// 테스트 10 〉	통과 (0.14ms, 33.6MB)
// 테스트 11 〉	통과 (0.14ms, 33.6MB)
// 테스트 12 〉	통과 (0.14ms, 33.5MB)
// 테스트 13 〉	통과 (0.14ms, 33.5MB)
// 테스트 14 〉	통과 (0.14ms, 33.5MB)
// 테스트 15 〉	통과 (0.14ms, 33.5MB)
// 테스트 16 〉	통과 (0.14ms, 33.6MB)
// 테스트 17 〉	통과 (0.14ms, 33.5MB)
// 테스트 18 〉	통과 (0.14ms, 33.4MB)
// 테스트 19 〉	통과 (0.14ms, 33.4MB)
// 테스트 20 〉	통과 (0.13ms, 33.5MB)
// 테스트 21 〉	통과 (0.13ms, 33.5MB)
// 테스트 22 〉	통과 (0.13ms, 33.5MB)
function solution(arr, budget) {
  return arr
    .sort((a, b) => a - b)
    .reduce((acc, price) => {
      if (budget - price >= 0) {
        budget -= price
        acc++
      }
      return acc
    }, 0)
}

solution([1, 3, 2, 5, 4], 9) // 3
solution([2, 2, 3, 3], 10) // 4
solution([1, 2, 3, 4, 5], 5) // 2
solution([1, 2, 3, 4, 5], 15) // 5
solution([1, 2, 3, 4, 5], 0) // 0
